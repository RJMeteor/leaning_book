import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-2EiVOIeu.js";const l="/leaning_book/assets/webrtcjr-Dh0VUV20.png",t="/leaning_book/assets/webrtcjg-ku4OYm_O.png",h="/leaning_book/assets/webrtclc-DadpiXdO.png",r="/leaning_book/assets/webrtcmp-BOle39nb.png",k="/leaning_book/assets/webrtccs-DKwDKJSI.png",p="/leaning_book/assets/webrtccp-CcNJPcOy.png",d="/leaning_book/assets/webrtcnz-DL40GRs5.png",o="/leaning_book/assets/webrtcnzp-CyHH3HI6.png",c={};function g(A,i){return n(),a("div",null,i[0]||(i[0]=[e('<h2 id="学习视频" tabindex="-1"><a class="header-anchor" href="#学习视频"><span>学习视频</span></a></h2><ul><li><a href="https://www.bilibili.com/video/BV1Dc411Z71W/?spm_id_from=333.788.top_right_bar_window_custom_collection.content.click" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1Dc411Z71W/?spm_id_from=333.788.top_right_bar_window_custom_collection.content.click</a></li><li><a href="https://www.bilibili.com/video/BV14kBxY9Ex2/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=b9c96b09f6a61394b053d5682a45cb67" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV14kBxY9Ex2/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=b9c96b09f6a61394b053d5682a45cb67</a></li></ul><h2 id="什么是-webrtc" tabindex="-1"><a class="header-anchor" href="#什么是-webrtc"><span><strong>什么是 WebRTC</strong></span></a></h2><p>WebRTC（Web Real-Time Communications）是一项实时通讯技术，它允许网络应用或者站点，在不借助中间媒介的情况下，建立浏览器之间点对点（Peer-to-Peer）的连接，实现视频流和（或）音频流或者其他任意数据的传输。WebRTC 包含的这些标准使用户在无需安装任何插件或者第三方的软件的情况下，创建点对点（Peer-to-Peer）的数据分享和电话会议成为可能。</p><h2 id="实时通信和即时通信的区别" tabindex="-1"><a class="header-anchor" href="#实时通信和即时通信的区别"><span><strong>实时通信和即时通信的区别</strong></span></a></h2><p>IM 即时通信，就是通过文字聊天、语音消息发送、文件传输等方式通信，考虑的是<strong>可靠性</strong>；</p><p>RTC 实时通信：音视频通话、电话会议，考虑的是<strong>低延时</strong>。</p><h2 id="webrtc-发展史" tabindex="-1"><a class="header-anchor" href="#webrtc-发展史"><span><strong>WebRTC 发展史</strong></span></a></h2><p>2011 年开始， Google 先后收购 GIPS 和 On2，组成 GIPS 音视频引擎 + VPx 系列视频编解码器，并将其代码开源，WebRTC 项目应运而生。</p><p>2012 年，Google 将 WebRTC 集成到 Chrome 浏览器中。于是我们就可以愉快的在浏览器之间进行音视频通信。</p><p>当前除了 IE 之外的浏览器都已支持 WebRTC。</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="webrtc-应用场景" tabindex="-1"><a class="header-anchor" href="#webrtc-应用场景"><span><strong>WebRTC 应用场景</strong></span></a></h2><p>WebRTC 的能力使其适用于各种实时通信场景：</p><ol><li>点对点通讯：WebRTC 支持浏览器之间进行音视频通话，例如语音通话、视频通话等；</li><li>电话会议：WebRTC 可以支持多人音视频会议，例如腾讯会议、钉钉会议等；</li><li>屏幕共享：WebRTC 不仅可以传输音视频流，还可以用于实时共享屏幕；</li><li>直播：WebRTC 可以用于构建实时直播，用户可以通过浏览器观看直播内容。</li></ol><h2 id="webrtc-组成部分" tabindex="-1"><a class="header-anchor" href="#webrtc-组成部分"><span><strong>WebRTC 组成部分</strong></span></a></h2><p>在了解 WebRTC 通信过程前，我们需要先来了解下 WebRTC 的组成部分，这可以帮助我们快速建立 WebRTC 的知识体系。</p><p>WebRTC 主要由三部分组成：<strong>浏览器 API</strong>、<strong>音视频引擎</strong>和<strong>网络 IO</strong>。</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="浏览器-api" tabindex="-1"><a class="header-anchor" href="#浏览器-api"><span><strong>浏览器 API</strong></span></a></h2><p>用于<strong>采集摄像头和麦克风</strong>生成媒体流，并处理音视频通信相关的<strong>编码、解码、传输</strong>过程，可以使用以下 API 在浏览器中创建实时通信应用程序。</p><ul><li>getUserMedia: 获取麦克风和摄像头的许可，使得 WebRTC 可以拿到本地媒体流；</li><li>RTCPeerConnection: 建立点对点连接的关键，提供了创建，保持，监控，关闭连接的方法的实现。像媒体协商、收集候选地址都需要它来完成；</li><li>RTCDataChannel: 支持点对点数据传输，可用于传输文件、文本消息等。</li></ul><h2 id="音视频引擎" tabindex="-1"><a class="header-anchor" href="#音视频引擎"><span><strong>音视频引擎</strong></span></a></h2><p>有了 WebRTC，我们可以很方便的实现音视频通信；而如果没有 WebRTC 的情况下，我们想要实现音视频通信，就需要去了解音视频编码器相关技术。</p><p>WebRTC<strong>内置了强大的音视频引擎</strong>，可以对媒体流进行编解码、回声消除、降噪、防止视频抖动等处理，我们使用者大可不用去关心如何实现 。主要使用的音视频编解码器有:</p><ul><li>OPUS: 一个开源的低延迟音频编解码器，WebRTC 默认使用；</li><li>G711: 国际电信联盟 ITU-T 定制出来的一套语音压缩标准，是主流的波形声音编解码器；</li><li>VP8: VP8，VP9，都是 Google 开源的视频编解码器，现在主要用于 WebRTC 视频编码；</li><li>H264: 视频编码领域的通用标准，提供了高效的视频压缩编码，之前 WebRTC 最先支持的是自己家的 VP8，后面也支持了 H264、H265 等。</li></ul><p>还有像回声消除AEC(Acoustic Echo Chancellor)、背景噪音抑制ANS(Automatic Noise Suppression)和Jitter buffer用来防止视频抖动，这些问题在 WebRTC 中也提供了非常成熟、稳定的算法，并且提供图像增加处理，例如美颜，贴图，滤镜处理等。</p><h2 id="网络-i-o" tabindex="-1"><a class="header-anchor" href="#网络-i-o"><span><strong>网络 I/O</strong></span></a></h2><p>WebRTC 传输层用的是<strong>UDP</strong>协议，因为音视频传输对<strong>及时性</strong>要求更高，如果使用 TCP 当传输层协议的话，如果发生丢包的情况下，因为 TCP 的可靠性，就会尝试重连，如果第七次之后仍然超时，则断开 TCP 连接。而如果第七次收到消息，那么传输的延迟就会达到 2 分钟。在延迟高的情况下，想做到正常的实时通讯显然是不可能的，此时 TCP 的可靠性反而成了弊端。</p><p>而 UDP 则正好相反，它只负责有消息就传输，不管有没有收到，这里从底层来看是满足 WebRTC 的需求的，所以 WebRTC 是采用 UDP 来当它的传输层协议的。</p><p>这里主要用到以下几种协议/技术：</p><ul><li>RTP/SRTP: 传输音视频数据流时，我们并不直接将音视频数据流交给 UDP 传输，而是先给音视频数据加个 RTP 头，然后再交给 UDP 进行，但是由于浏览器对安全性要求比较高，增加了加密这块的处理，采用 SRTP 协议；</li><li>RTCP：通过 RTCP 可以知道各端的网络质量，这样对方就可以做流控处理；</li><li>P2P(ICE + STUN + TURN): 这是 WebRTC 最核心的技术，利用 ICE、STUN、TURN 等技术，实现了浏览器之间的直接点对点连接，解决了 NAT 穿透问题，实现了高质量的网络传输。</li></ul><p>除了以上三部分，WebRTC 还需要一个<strong>信令服务</strong>做会话管理，但 WebRTC 规范里没有包含信令协议，需要自行实现。</p><h2 id="webrtc-通信过程" tabindex="-1"><a class="header-anchor" href="#webrtc-通信过程"><span><strong>WebRTC 通信过程</strong></span></a></h2><p>基于以上，我们来思考下 WebRTC 实现一对一通信需要哪些基本条件？</p><ul><li>WebRTC 终端（两个）：本地和远端，负责音视频采集、编解码、NAT 穿越以及音视频数据传输等；</li><li>Signal 信令服务器：自行实现的信令服务，负责信令处理，如加入房间、离开房间、媒体协商消息的传递等；</li><li>STUN/TURN 服务器：负责获取 WebRTC 终端在公网的 IP 地址，以及 NAT 穿越失败后的数据中转服务。</li></ul><p>通信过程如下：</p><ol><li>本地（WebRTC 终端）启动后，检测设备可用性，如果可用后开始进行音视频采集工作；</li><li>本地就绪后，发送“加入房间”信令到 Signal 服务器；</li><li>Signal 服务器创建房间，等待加入；</li><li>对端（WebRTC 终端）同样操作，加入房间，并通知另一端；</li><li>双端创建媒体连接对象RTCPeerConnection，进行媒体协商；</li><li>双端进行连通性测试，最终建立连接；</li><li>将采集到的音视频数据通过RTCPeerConnection对象进行编码，最终通过 P2P 传送给对端/本地，再进行解码、展示。</li></ol><p>第 6 步在建立连接进行 P2P 穿越时很有可能失败。当 P2P 穿越失败时，为了保障音视频数据仍然可以互通，则需要通过 TURN 服务器进行音视频数据中转。后面会讲到 TURN 服务是什么，以及如何搭建 TURN 服务。</p><p>接下来，我们按照通信过程，来一一讲解每一步要做的事情。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="相关-api" tabindex="-1"><a class="header-anchor" href="#相关-api"><span><strong>相关 API</strong></span></a></h2><h3 id="mediadeviceinfo" tabindex="-1"><a class="header-anchor" href="#mediadeviceinfo"><span><strong>MediaDeviceInfo</strong></span></a></h3><p>用于表示每个媒体输入/输出设备的信息，包含以下 4 个属性：</p><ul><li>deviceId: 设备的唯一标识；</li><li>groupId: 如果两个设备属于同一物理设备，则它们具有相同的组标识符 - 例如同时具有内置摄像头和麦克风的显示器；</li><li>label: 返回描述该设备的字符串，即设备名称（例如“外部 USB 网络摄像头”）；</li><li>kind: 设备种类，可用于识别出是音频设备还是视频设备，是输入设备还是输出设备：audioinput/audiooutput/videoinput</li></ul><p>可以在浏览器控制台直接输入</p><p>navigator.mediaDevices.enumerateDevices()返回如下所示：</p><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="mediadevices" tabindex="-1"><a class="header-anchor" href="#mediadevices"><span><strong>MediaDevices</strong></span></a></h3><p>该接口提供访问连接媒体输入的设备（如摄像头、麦克风）以及获取屏幕共享等方法。而我们需要获取可用的音视频设备列表，就是通过该接口中的方法来实现的，如前面提到的getUserMedia方法。</p><p>方法：</p><ul><li>MediaDevices.enumerateDevices()</li><li>获取可用的媒体输入和输出设备的列表，例如：麦克风、相机、耳机等</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">jvar</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> enumeratorPromise</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> navigator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mediaDevices</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">enumerateDevices</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>返回的 promise 对象，成功回调时会拿到描述设备的 MediaDeviceInfo 列表，用来存放 WebRTC 获取到的每一个音视频设备信息。</li><li>MediaDevices.getDisplayMedia()</li><li>提示用户去选择和授权捕获展示的内容或部分内容（如一个窗口）在一个 MediaStream 里。然后，这个媒体流可以通过使用 MediaStream Recording API 被记录或者作为 WebRTC 会话的一部分被传输。用于共享屏幕时传递。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> promise</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> navigator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mediaDevices</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDisplayMedia</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">constraints</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>接受可选参数 constraints 同getUserMedia方法，不传时也会开启视频轨道。</li><li></li><li>MediaDevices.getUserMedia()</li></ul><p><strong>WebRTC 相关的 API 需要 Https（或者 localhost）环境支持，因为在浏览器上通过 HTTP 请求下来的 JavaScript 脚本是不允话访问音视频设备的，只有通过 HTTPS 请求的脚本才能访问音视频设备。</strong></p><h2 id="第一步-音视频采集" tabindex="-1"><a class="header-anchor" href="#第一步-音视频采集"><span><strong>第一步：音视频采集</strong></span></a></h2><p>采集音视频数据是 WebRTC 通信的前提，我们可以使用浏览器提供的 getUserMedia API 进行音视频采集。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> constraints</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">video</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">audio</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> localStream</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> navigator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mediaDevices</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getUserMedia</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">constraints</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>getUserMedia 接受参数constraints用于指定 MediaStream 中包含哪些类型的媒体轨（音频轨、视频轨），并对媒体轨做设置（如设置视频的宽高、帧率等）。</p><p>返回一个 promise 对象，成功后会获得流媒体对象 MediaStream（包含从音视频设备中获取的音视频数据）； 使用 getUserMedia 时，浏览器会询问用户，开启音频和视频权限。如果用户拒绝或无权限时，则返回 error。</p><p>通过getUserMedia成功回调拿到媒体流之后，通过将媒体流挂载到videoDOM.srcObject即可显示在页面上。</p><h2 id="第二步-rtcpeerconnection-对象" tabindex="-1"><a class="header-anchor" href="#第二步-rtcpeerconnection-对象"><span><strong>第二步：RTCPeerConnection 对象</strong></span></a></h2><p>RTCPeerConnection是一个由本地计算机到远端的 WebRTC 连接，该接口提供<strong>创建，保持，监控，关闭连接</strong>的方法的实现，可以简单理解为功能强大的 socket 连接。</p><p>通过new RTCPeerConnection即可创建一个 RTCPeerConnection 对象，此对象主要负责与<strong>各端建立连接（NAT 穿越），接收、发送音视频数据</strong>，并保障音视频的服务质量，接下来要说的端到端之间的媒体协商，也是基于 RTCPeerConnection 对象来实现的。</p><p>至于它是如何保障端与端之间的连通性，如何保证音视频的服务质量，又如何确定使用的是哪个编解码器等问题，作为应用者的我们大可不必关心，因为所有的这些问题都已经在 RTCPeerConnection 对象的底层实现好了 。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> localPc</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RTCPeerConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">rtcConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 将音视频流添加到 RTCPeerConnection 对象中</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">localStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getTracks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">track</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  localPc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addTrack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">track</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">localStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在第一步获取音视频流后，需要将流添加到创建的 RTCPeerConnection 对象中，当 RTCPeerConnection 对象获得音视频流后，就可以开始与对端进行媒协体协商。</p><h2 id="第三步-媒体协商" tabindex="-1"><a class="header-anchor" href="#第三步-媒体协商"><span>第三步：媒体协商</span></a></h2><h3 id="什么是媒体协商" tabindex="-1"><a class="header-anchor" href="#什么是媒体协商"><span><strong>什么是媒体协商</strong></span></a></h3><p>媒体协商的作用是<strong>找到双方共同支持的媒体能力</strong>，如双方各自支持的编解码器，音频的参数采样率，采样大小，声道数、视频的参数分辨率，帧率等等。</p><p>就好比两人相亲，通过介绍人男的知道了女的身高、颜值、身材，女的理解了男的家庭、财富、地位，然后找到你们的共同点“穷”，你俩觉得“哇竟然这么合适”，赶紧见面深入交流一下 。</p><p>上述说到的这些音频/视频的信息都会在**SDP（Session Description Protocal：即使用文本描述各端的“能力”）**中进行描述。</p><p>一对一的媒体协商大致如下：首先自己在 SDP 中记录自己支持的音频/视频参数和传输协议，然后进行信令交互，交互的过程会同时传递 SDP 信息，另一方接收后与自己的 SDP 信息比对，并取出它们之间的交集，这个交集就是它们协商的结果，也就是它们最终使用的音视频参数及传输协议。</p><h3 id="媒体协商过程" tabindex="-1"><a class="header-anchor" href="#媒体协商过程"><span><strong>媒体协商过程</strong></span></a></h3><p>一对一通信中，发起方发送的 SDP 称为Offer(提议)，接收方发送的 SDP 称为Answer(应答)。</p><p>每端保持两个描述：描述本身的本地描述LocalDescription，描述呼叫的远端的远程描述RemoteDescription。</p><p>当通信双方 RTCPeerConnection 对象创建完成后，就可以进行媒体协商了，大致过程如下：</p><ol><li>发起方创建 Offer 类型的 SDP，保存为本地描述后再通过信令服务器发送到对端；</li><li>接收方接收到 Offer 类型的 SDP，将 Offer 保存为远程描述；</li><li>接收方创建 Answer 类型的 SDP，保存为本地描述，再通过信令服务器发送到发起方，此时接收方已知道连接双方的配置；</li><li>发起方接收到 Answer 类型的 SDP 后保存到远程描述，此时发起方也已知道连接双方的配置；</li><li>整个媒体协商过程处理完毕。</li></ol><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>更详细的步骤请参考 MDN 中对会话描述讲解。</p><h3 id="代码实现媒体协商过程" tabindex="-1"><a class="header-anchor" href="#代码实现媒体协商过程"><span><strong>代码实现媒体协商过程</strong></span></a></h3><p>通过 MDN 先了解下我们需要用到的 API：</p><ul><li>createOffer用于创建 Offer；</li><li>createAnswer用于创建 Answer；</li><li>setLocalDescription用于设置本地 SDP 信息；</li><li>setRemoteDescription用于设置远端的 SDP 信息。</li></ul><h4 id="发起方创建-rtcpeerconnection" tabindex="-1"><a class="header-anchor" href="#发起方创建-rtcpeerconnection"><span><strong>发起方创建 RTCPeerConnection</strong></span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 配置</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> rtcConfig</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> localPc</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RTCPeerConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">rtcConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="发起方-接收方创建-offer-保存为本地描述" tabindex="-1"><a class="header-anchor" href="#发起方-接收方创建-offer-保存为本地描述"><span><strong>发起方/接收方创建 Offer 保存为本地描述</strong></span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> offer</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> localPc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createOffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 保存为本地描述</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> localPc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setLocalDescription</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">offer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 通过信令服务器发送到对端</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">emit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;offer&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">offer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="接受-offer-后-创建-answer-并发送" tabindex="-1"><a class="header-anchor" href="#接受-offer-后-创建-answer-并发送"><span><strong>接受 Offer 后 创建 Answer 并发送</strong></span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;offer&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">offer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 将 Offer 保存为远程描述；</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  remotePc</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RTCPeerConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">rtcConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> remotePc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setRemoteDescription</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">offer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> remoteAnswer</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> remotePc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createAnswer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> remotePc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setLocalDescription</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">remoteAnswer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">emit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;answer&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">remoteAnswer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="接受-answer-存储为远程描述" tabindex="-1"><a class="header-anchor" href="#接受-answer-存储为远程描述"><span><strong>接受 Answer 存储为远程描述</strong></span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 4. 发起方接收到 Answer 类型的 SDP 后保存到远程描述，此时发起方也已知道连接双方的配置；</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;answer&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">answer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 将 Answer 保存为远程描述；</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> localPc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setRemoteDescription</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">answer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，媒体协商结束，紧接着在 WebRTC 底层会收集Candidate，并进行连通性检测，最终在通话双方之间建立起一条链路来。</p><h2 id="第四步-端与端建立连接" tabindex="-1"><a class="header-anchor" href="#第四步-端与端建立连接"><span><strong>第四步：端与端建立连接</strong></span></a></h2><p>媒体协商结束后，双端统一了传输协议、编解码器等，此时就需要建立连接开始音视频通信了。</p><p>但 WebRTC 既要保持音视频通信的<strong>质量</strong>，又要保证<strong>联通性</strong>。所有，当同时存在多个有效连接时，它首先选择传输质量最好的线路，如能用内网连通就不用公网，优先 P2P 传输，如果 P2P 不通才会选择中继服务器（relay），因为中继方式会增加双端传输的时长。</p><h3 id="什么是-candidate" tabindex="-1"><a class="header-anchor" href="#什么是-candidate"><span><strong>什么是 Candidate</strong></span></a></h3><p>第五步最后，我们提到了媒体协商结束后，开始收集 Candidate，那么我们来了解下什么是 Candidate、以及它的作用是什么？</p><p>ICE Candidate（ICE 候选者）：表示 WebRTC 与远端通信时使用的协议、IP 地址和端口，结构如下：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">  address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">xxx.xxx.xxx.xxx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 本地IP地址</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">  port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 本地端口号</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">  type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">&#39;host/srflx/relay&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 候选者类型</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">  priority</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 优先级</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">  protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">&#39;udp/tcp&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 传输协议</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">  usernameFragment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">string</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 访问服务的用户名</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">  ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>WebRTC 在进行连接测试后时，通信双端会提供众多候选者，然后按照优先级进行连通性测试，测试成功就会建立连接。</p><p>候选者 Candidate 类型，即 type 分为三种类型：</p><ul><li>host：本机候选者</li><li>优先级最高，host 类型之间的连通性测试就是内网之间的连通性测试，P2P。</li><li>srflx：内网主机映射的外网地址和端口</li><li>如果 host 无法建立连接，则选择 srflx 连接，即 P2P 连接。</li><li>relay：中继候选者</li><li>优先级最低，只有上述两种不存在时，才会走中继服务器的模式，因为会增加传输时间，优先级最低。</li></ul><h3 id="如何收集-candidate" tabindex="-1"><a class="header-anchor" href="#如何收集-candidate"><span><strong>如何收集 Candidate</strong></span></a></h3><p>我们已经了解了 Candidate 的三种类型以及各自的优先级，那么我们看下双端是如何收集 Candidate 的。</p><h3 id="host-类型" tabindex="-1"><a class="header-anchor" href="#host-类型"><span><strong>host 类型</strong></span></a></h3><p>host 类型的 Candidate 是最好收集的，就是本机的 ip 地址 和端口。</p><h3 id="srflx-和-relay-类型" tabindex="-1"><a class="header-anchor" href="#srflx-和-relay-类型"><span><strong>srflx 和 relay 类型</strong></span></a></h3><p>srflx 类型的 Candidate 就是内网通过 NAT（Net Address Translation，作用是进行内外网的地址转换，位于内网的网关上）映射后的外网地址。</p><p>如：访问百度时 NAT 会将主机内网地址转换为外网地址，发送请求到百度的服务器，服务器返回到公网地址和端口，在通过 NAT 转到内网的主机上。</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那 WebRTC 是怎么处理 NAT 的呢？</p><p>没错，就是我们上面提到的<strong>STUN</strong>和<strong>TURN</strong>。</p><h3 id="stun-协议" tabindex="-1"><a class="header-anchor" href="#stun-协议"><span><strong>STUN 协议</strong></span></a></h3><p>全称 Session Traversal Utilities for NAT（NAT 会话穿越应用程序），是一种网络协议，它允许位于 NAT 后的客户端找出自己的公网地址，也就是<strong>遵守这个协议就可以拿到自己的公网 IP</strong>。</p><p>STUN 服务可以直接使用 google 提供的免费服务 <a href="http://stun.l.google.com:19302" target="_blank" rel="noopener noreferrer">stun.l.google.com:19302</a>，或者自己搭建。</p><h3 id="turn-协议" tabindex="-1"><a class="header-anchor" href="#turn-协议"><span><strong>TURN 协议</strong></span></a></h3><p>全称 Traversal Using Relays around NAT（使用中继穿透 NAT），STUN 的中继扩展。简单的说，TURN 与 STUN 的共同点都是通过修改应用层中的私网地址达到 NAT 穿透的效果，异同点是 TURN 是通过两方通讯的“中间人”方式实现穿透。</p><p>上面提到的 relay 服务就是通过 TURN 协议实现的，所以 relay 服务器和 TURN 服务器是同一个意思，都是中继服务器。</p><p>relay 类型的 Candidate 获取是通过 TURN 协议完成，它的<strong>连通率是所有候选者中连通率最高的</strong>，优先级也是最低的。</p><p>WebRTC 首会先使用 STUN 服务器去找出自己的 NAT 环境，然后试图找出打“洞”的方式，最后试图创建点对点连接。 当它尝试过不同的穿透方式都失败之后，为保证通信成功率会启用 TURN 服务器进行中转，此时所有的流量都会通过 TURN 服务器。这时如果 TURN 服务器配置不好或带宽不够时，通信质量就会变差。</p><p><strong>重点：STUN 服务器是用来获取外网地址进行 P2P；而 TURN 服务器是在 P2P 失败时进行转发的</strong></p><h3 id="nat-打洞-p2p-穿越" tabindex="-1"><a class="header-anchor" href="#nat-打洞-p2p-穿越"><span><strong>NAT 打洞/P2P 穿越</strong></span></a></h3><p>NAT 解决了 IPv4 地址不够用的情况，但因为有了 NAT，端与端之间的网络连接变得复杂，也就需要 NAT 穿越等技术。</p><p>收集完 Candidate 后，WebRTC 就按照优先级顺序进行连通性检测。如果双方位于同一个局域网，就会直接建立连接，如果不在同一个局域网内，WebRTC 就会尝试 NAT 打洞，即 P2P 穿越了。</p><h3 id="ice" tabindex="-1"><a class="header-anchor" href="#ice"><span><strong>ICE</strong></span></a></h3><p>全称 Interactive Connectivity Establishment（交互式连通建立方式），ICE 协议通过一系列的技术（如 STUN、TURN 服务器）帮助通信双方发现和协商可用的公共网络地址，从而实现 NAT 穿越，也就是上面说的获取所有候选者类型的过程，即：在本机收集所有的 host 类型的 Candidate，通过 STUN 协议收集 srflx 类型的 Candidate，使用 TURN 协议收集 relay 类型的 Candidate。</p><h3 id="代码部分" tabindex="-1"><a class="header-anchor" href="#代码部分"><span><strong>代码部分</strong></span></a></h3><p>当 Candidate 被收集之后，会触发icecandidate事件，所以需要在代码中监听此事件，以对收集到的 Candidate 做处理。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">localPc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onicecandidate</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 回调时，将自己candidate发给对方，对方可以直接addIceCandidate(candidate)添加可以获取流</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">candidate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">emit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;candidate&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">candidate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印出的 Candidate 如下所示：</p><figure><img src="`+o+`" alt="null" tabindex="0" loading="lazy"><figcaption>null</figcaption></figure><p>与我们上面提到的 Candidate 结构一致，其中type字段为host，即本机候选者。</p><p>对端接收到发送的 candidate 后，再调用 RTCPeerConnection 对象的addIceCandidate()方法将收到的 Candidate 保存起 来，然后按照 Candidate 的优先级进行连通性检测。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> remotePc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addIceCandidate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">candidate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果 Candidate 连通性检测完成，那么端与端之间就建立了物理连接，这时媒体数据就可能通这个物理连接源源不断地传输了 Ï。</p><h2 id="第五步-显示远端流" tabindex="-1"><a class="header-anchor" href="#第五步-显示远端流"><span><strong>第五步：显示远端流</strong></span></a></h2><p>通信双方通过 RTCPeerConnection 建立连接后，本地的音视频数据源源不断的传输，要想在远端展示出来，就需要将 RTCPeerConnection 对象与<code>&lt;video&gt;</code>或<code>&lt;audio&gt;</code>进行绑定。</p><p>当远端创建好 RTCPeerConnection 对象后，会为 RTCPeerConnection 绑定ontrack事件，当有音视频数据流到来时，输入参数 event 中包含了远端的音视频流，即 MediaStream 对象，此时将此对象赋值给<code>&lt;video&gt;</code>或<code>&lt;audio&gt;</code>的srcObject字段，这样 RTCPeerConnection 对象就与<code>&lt;video&gt;</code>或<code>&lt;audio&gt;</code>进行了绑定，音频或视频就能展示出来。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">remotePc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ontrack</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  video</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">srcObject</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">streams</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  video</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">oncanplay</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> video</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">play</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，一个完整的 WebRTC 通信过程就结束了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ol><li>发送 SDP Offer: <ul><li>当一个 WebRTC 对等端（比如 Peer A）想要发起通信时，它会生成一个 SDP Offer，这个 Offer 包含了有关媒体会话的详细信息，如媒体类型、编解码器、网络参数等。</li><li>Peer A 将这个 SDP Offer 发送到信令服务器，信令服务器再将其转发给另一个对等端（比如 Peer B）。</li></ul></li><li>接收 SDP Offer 并发送 SDP Answer: <ul><li>Peer B 接收到 SDP Offer 后，会解析其中的内容，并生成一个 SDP Answer，其中包含 Peer B 对会话的响应信息。</li><li>Peer B 将 SDP Answer 发送回信令服务器，信令服务器将其转发回 Peer A。</li></ul></li><li>ICE Candidate Discovery: <ul><li>在 SDP Offer 和 SDP Answer 交换之后，每个对等端开始生成 ICE Candidates。ICE Candidates 包括可能的网络路径，用于穿越 NAT 和防火墙。</li><li>每个对等端会将其 ICE Candidates 通过信令服务器发送给对方。</li><li>信令服务器将对等端的 ICE Candidates 转发给另一端的对等端。</li></ul></li><li>测试和建立连接: <ul><li>一旦双方对 ICE Candidates 进行交换，各个对等端会进行连接性检查，测试这些候选者的有效性。</li><li>根据测试结果，双方选择最佳的候选者对，建立实际的点对点连接。</li><li>成功建立连接后，媒体流（如音频、视频）可以通过这个连接进行传输。</li></ul></li></ol>`,145)]))}const b=s(c,[["render",g],["__file","index.html.vue"]]),F=JSON.parse('{"path":"/webframe/webrtc/","title":"WebRTC","lang":"zh-CN","frontmatter":{"title":"WebRTC","author":"RJMeteor","createTime":"2024/12/02 04:41:42","permalink":"/webframe/webrtc/"},"headers":[{"level":2,"title":"学习视频","slug":"学习视频","link":"#学习视频","children":[]},{"level":2,"title":"什么是 WebRTC","slug":"什么是-webrtc","link":"#什么是-webrtc","children":[]},{"level":2,"title":"实时通信和即时通信的区别","slug":"实时通信和即时通信的区别","link":"#实时通信和即时通信的区别","children":[]},{"level":2,"title":"WebRTC 发展史","slug":"webrtc-发展史","link":"#webrtc-发展史","children":[]},{"level":2,"title":"WebRTC 应用场景","slug":"webrtc-应用场景","link":"#webrtc-应用场景","children":[]},{"level":2,"title":"WebRTC 组成部分","slug":"webrtc-组成部分","link":"#webrtc-组成部分","children":[]},{"level":2,"title":"浏览器 API","slug":"浏览器-api","link":"#浏览器-api","children":[]},{"level":2,"title":"音视频引擎","slug":"音视频引擎","link":"#音视频引擎","children":[]},{"level":2,"title":"网络 I/O","slug":"网络-i-o","link":"#网络-i-o","children":[]},{"level":2,"title":"WebRTC 通信过程","slug":"webrtc-通信过程","link":"#webrtc-通信过程","children":[]},{"level":2,"title":"相关 API","slug":"相关-api","link":"#相关-api","children":[{"level":3,"title":"MediaDeviceInfo","slug":"mediadeviceinfo","link":"#mediadeviceinfo","children":[]},{"level":3,"title":"MediaDevices","slug":"mediadevices","link":"#mediadevices","children":[]}]},{"level":2,"title":"第一步：音视频采集","slug":"第一步-音视频采集","link":"#第一步-音视频采集","children":[]},{"level":2,"title":"第二步：RTCPeerConnection 对象","slug":"第二步-rtcpeerconnection-对象","link":"#第二步-rtcpeerconnection-对象","children":[]},{"level":2,"title":"第三步：媒体协商","slug":"第三步-媒体协商","link":"#第三步-媒体协商","children":[{"level":3,"title":"什么是媒体协商","slug":"什么是媒体协商","link":"#什么是媒体协商","children":[]},{"level":3,"title":"媒体协商过程","slug":"媒体协商过程","link":"#媒体协商过程","children":[]},{"level":3,"title":"代码实现媒体协商过程","slug":"代码实现媒体协商过程","link":"#代码实现媒体协商过程","children":[]}]},{"level":2,"title":"第四步：端与端建立连接","slug":"第四步-端与端建立连接","link":"#第四步-端与端建立连接","children":[{"level":3,"title":"什么是 Candidate","slug":"什么是-candidate","link":"#什么是-candidate","children":[]},{"level":3,"title":"如何收集 Candidate","slug":"如何收集-candidate","link":"#如何收集-candidate","children":[]},{"level":3,"title":"host 类型","slug":"host-类型","link":"#host-类型","children":[]},{"level":3,"title":"srflx 和 relay 类型","slug":"srflx-和-relay-类型","link":"#srflx-和-relay-类型","children":[]},{"level":3,"title":"STUN 协议","slug":"stun-协议","link":"#stun-协议","children":[]},{"level":3,"title":"TURN 协议","slug":"turn-协议","link":"#turn-协议","children":[]},{"level":3,"title":"NAT 打洞/P2P 穿越","slug":"nat-打洞-p2p-穿越","link":"#nat-打洞-p2p-穿越","children":[]},{"level":3,"title":"ICE","slug":"ice","link":"#ice","children":[]},{"level":3,"title":"代码部分","slug":"代码部分","link":"#代码部分","children":[]}]},{"level":2,"title":"第五步：显示远端流","slug":"第五步-显示远端流","link":"#第五步-显示远端流","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1734285754000,"updatedTime":1734285754000,"contributors":[{"name":"RJMeteor","email":"3029364473@qq.com","commits":1}]},"readingTime":{"minutes":18.96,"words":5688},"filePathRelative":"pages/webframe/basics/javascript/webrtc.md","localizedDate":"2024年12月15日","excerpt":"<h2>学习视频</h2>\\n<ul>\\n<li><a href=\\"https://www.bilibili.com/video/BV1Dc411Z71W/?spm_id_from=333.788.top_right_bar_window_custom_collection.content.click\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.bilibili.com/video/BV1Dc411Z71W/?spm_id_from=333.788.top_right_bar_window_custom_collection.content.click</a></li>\\n<li><a href=\\"https://www.bilibili.com/video/BV14kBxY9Ex2/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=b9c96b09f6a61394b053d5682a45cb67\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.bilibili.com/video/BV14kBxY9Ex2/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=b9c96b09f6a61394b053d5682a45cb67</a></li>\\n</ul>"}');export{b as comp,F as data};
