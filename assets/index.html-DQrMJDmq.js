import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as i,b as l,d as t,e as h,r as p,o as d,f as k}from"./app-xdcQUDNE.js";const r="/assets/awk1-BFQtf5qe.jpg",c="/assets/awk2-DhB1ImLn.jpg",g="/assets/awk3-d8rNgLsY.jpg",o="/assets/awk4-xjXkcV4P.jpg",A="/assets/awk5-R-DU8LTH.jpg",B="/assets/awk6-999tiVxJ.jpg",F="/assets/awk7-DspHlMI4.jpg",u="/assets/awk8-bCT-SwxA.jpg",y="/assets/awk9-BQGXgIXA.jpg",b="/assets/awk10-C63d8bTm.jpg",v="/assets/awk11-bhotoeFZ.jpg",m="/assets/awk12-CGM82eiS.jpg",E="/assets/awk13-C_-ra3AM.jpg",f={};function x(C,s){const a=p("RouteLink");return d(),e("div",null,[s[1]||(s[1]=i(`<h1 id="nohup" tabindex="-1"><a class="header-anchor" href="#nohup"><span>nohup</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><ul><li><strong>用途</strong>：<code>nohup</code> 是一个 Unix 命令，用于在用户注销后继续运行命令。它的名字来源于 &quot;no hang up&quot;，即不挂断。</li><li>功能 <ul><li><strong>后台运行</strong>：将命令放到后台执行，即使用户注销或关闭终端，命令也会继续运行。</li><li><strong>输出重定向</strong>：默认将命令的输出重定向到 <code>nohup.out</code> 文件，也可以指定其他文件。</li></ul></li></ul><h3 id="终端正常退出" tabindex="-1"><a class="header-anchor" href="#终端正常退出"><span>终端正常退出</span></a></h3><ul><li><strong>默认行为</strong>：如果终端正常退出（例如，用户关闭终端窗口或注销），后台运行的命令通常会被发送 <code>SIGHUP</code> 信号，导致命令终止。</li><li><strong>防止终止</strong>：为了防止命令在终端退出时终止，可以使用 <code>nohup</code> 命令。<code>nohup</code> 会忽略 <code>SIGHUP</code> 信号，确保命令在终端退出后继续运行。</li></ul><h3 id="终端被强制关闭" tabindex="-1"><a class="header-anchor" href="#终端被强制关闭"><span>终端被强制关闭</span></a></h3><ul><li><strong>默认行为</strong>：如果终端被强制关闭（例如，系统崩溃或电源中断），后台运行的命令通常也会被终止。</li><li><strong>防止终止</strong>：使用 <code>nohup</code> 命令可以减少这种情况的发生，但不能完全保证命令在系统崩溃时继续运行。</li></ul><h3 id="使用-disown-命令" tabindex="-1"><a class="header-anchor" href="#使用-disown-命令"><span>使用 <code>disown</code> 命令</span></a></h3><ul><li><p><strong><code>disown</code> 命令</strong>：在某些 shell 中（如 <code>bash</code>），可以使用 <code>disown</code> 命令将后台作业从当前 shell 的作业控制中移除，这样即使终端退出，作业也不会收到 <code>SIGHUP</code> 信号。</p></li><li><p>使用方法</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">node</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> index.js</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">disown</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这将启动 <code>node index.js</code> 并将其放到后台运行，然后使用 <code>disown</code> 命令将其从当前 shell 的作业控制中移除。即使终端退出，命令也会继续运行。</p></li></ul><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nohup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> index.js</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,11)),l("p",null,[t(a,{to:"/leaning_book/linux/shellscript/#%E9%87%8D%E5%AE%9A%E5%90%91"},{default:h(()=>s[0]||(s[0]=[k("有关重定向的知识点")])),_:1})]),s[2]||(s[2]=i(`<table><thead><tr><th>新启动程序</th><th>nohup ./test.sh &gt;log 2&gt;&amp;1 &amp;</th><th>setsid ./test.sh &gt;log 2&gt;&amp;1 &amp;</th></tr></thead><tbody><tr><td>已运行程序</td><td>nohup -p PID</td><td>disown -h %n</td></tr></tbody></table><h1 id="screen" tabindex="-1"><a class="header-anchor" href="#screen"><span>screen</span></a></h1><p><strong>功能</strong>：<code>screen</code> 是一个终端复用工具，允许在一个终端会话中运行多个进程，并支持会话分离和恢复功能。即使终端断开，后台服务也会继续运行。</p><table><thead><tr><th>screen -S NAME</th><th>screen -S sxhlinux</th><th>新建一个名为sxhlinux的screen会话</th></tr></thead><tbody><tr><td>screen -ls</td><td>screen -ls</td><td>查看当前系统中所有的screen会话</td></tr><tr><td>screen -d NAME</td><td>screen -d sxhlinux</td><td>将sxhlinux会话与当前shell终端分离</td></tr><tr><td>screen -r NAME</td><td>screen -r sxhlinux</td><td>在当前shell进程中与名为sxhlinux的进程重新连接</td></tr><tr><td>screen -R NAME</td><td>screen -R sxhlinux</td><td>同-r选项，另外如果sxhlinux不存在，就会重新新建一个名为sxhlinux的screen会话</td></tr><tr><td>screen -x NAME</td><td>screen -x sxhlinux</td><td>多个终端同时操作名为sxhlinux的screen会话，操作同步可见</td></tr></tbody></table><p>在每个screen 会话中都有如下快捷键可以使用</p><table><thead><tr><th>ctrl-a c</th><th>在当前会话中创建一个新的的shell窗口</th></tr></thead><tbody><tr><td>ctrl-a n/p</td><td>切换到下/上一个窗口</td></tr><tr><td>ctrl-a d</td><td>使当前会话与原shell detach</td></tr><tr><td>ctrl-a w</td><td>列出当前会话中的所有窗口</td></tr><tr><td>ctrl-a k</td><td>关闭当前窗口</td></tr><tr><td>ctrl-a x/q</td><td>锁定、解锁当前窗口</td></tr><tr><td>ctrl-a [/]</td><td>[启动复制模式（vi操作习惯），第一次空格键表示开始复制，第二次空格表示结束复制；]将[复制的内容粘贴到当前位置</td></tr><tr><td>ctrl-a S/|</td><td>将当前屏幕水平/垂直分成两部分，可以通过ctrl-a TAB来切换</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">常用后台运行命令比较</p><ul><li><p>nohup一般作为启动服务或者守护进程来执行一个单独的命令的情形下使用（<strong>记得输出重定向</strong>）</p></li><li><p>screen可以作为日常连接远程开发服务器做开发使用，可以方便的切换各种工作台，而不用打开多个终端。</p></li></ul></div><h1 id="systemd" tabindex="-1"><a class="header-anchor" href="#systemd"><span><code>systemd</code></span></a></h1><h2 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1"><span>概述</span></a></h2><p><code>systemd</code> 是现代 Linux 系统中用于管理后台服务的标准工具，适合需要保证持久性和稳定性的服务。使用 <code>systemd</code>，你可以轻松地管理系统服务，并**<code>确保它们在系统启动时自动运行，甚至在进程失败时自动重启</code>**。</p><h2 id="使用方法-1" tabindex="-1"><a class="header-anchor" href="#使用方法-1"><span>使用方法</span></a></h2><ol><li><p>编写一个<code>.service</code></p><p>文件，并将其放置在<code>/etc/systemd/system/</code>目录下，例如：</p><div class="language-ini line-numbers-mode" data-highlighter="shiki" data-ext="ini" data-title="ini" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">[Unit]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">Description</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">My Background Service</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">[Service]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">ExecStart</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">/path/to/your/command</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">Restart</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">always</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">[Install]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">WantedBy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">multi-user.target</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过以下命令启用和启动服务：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> enable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my_service</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my_service</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h2><p><strong>优点：</strong></p><ul><li>能够确保后台服务的持久性，即便是系统重启后，服务仍会自动启动。</li><li>支持自动重启、失败处理等高级功能，非常适合生产环境。</li></ul><p><strong>缺点：</strong></p><ul><li>配置较为复杂，需要编写 <code>.service</code> 文件，适合对系统有一定了解的用户。</li></ul><p><strong>适用场景：</strong></p><ul><li>适合管理关键的后台服务，尤其是生产环境中的守护进程或长期服务。</li></ul><h1 id="read" tabindex="-1"><a class="header-anchor" href="#read"><span>read</span></a></h1><p>要与Linux交互，脚本获取键盘输入的结果是必不可少的，read可以读取键盘输入的字符。</p><p>read命令用于从标准输入中读取输入单行，并将读取的单行根据IFS变量分裂成多个字段，并将分割后的字段分别赋值给指定的变量列表var_name。第一个字段分配给第一个变量var_name1，第二个字段分配给第二个变量var_name2，依次到结束。如果指定的变量名少于字段数量，则多出的字段数量也同样分配给最后一个var_name，如果指定的变量命令多于字段数量，则多出的变量赋值为空。</p><p>如果没有指定任何var_name，则分割后的所有字段都存储在特定变量REPLY中。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [-rs] [-a ARRAY] [-d delim] [-n nchars] [-N nchars] [-p prompt] [-t timeout] [-u fd] [var_name1 var_name2 ...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">选项说明：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-a：将分裂后的字段依次存储到指定的数组中，存储的起始位置从数组的index</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=0开始。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-d：指定读取行的结束符号。默认结束符号为换行符。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-n：限制读取N个字符就自动结束读取，如果没有读满N个字符就按下回车或遇到换行符，则也会结束读取。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-N：严格要求读满N个字符才自动结束读取，即使中途按下了回车或遇到了换行符也不结束。其中换行符或回车算一个字符。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-p：给出提示符。默认不支持</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;\\n&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">换行，要换行需要特殊处理，见下文示例。例如，</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;-p 请输入密码：&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-r：禁止反斜线的转义功能。这意味着</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">会变成文本的一部分。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-s：静默模式。输入的内容不会回显在屏幕上。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-t：给出超时时间，在达到超时时间时，read退出并返回错误。也就是说不会读取任何内容，即使已经输入了一部分。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-u：从给定文件描述符(fd=N)中读取数据。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="awk" tabindex="-1"><a class="header-anchor" href="#awk"><span>awk</span></a></h1><p>awk其实是一门编程语言，它支持条件判断、数组、循环等功能。所以，我们也可以把awk理解成一个脚本语言解释器。</p><p>grep 、sed、awk被称为linux中的”三剑客”。</p><p>我们总结一下这三个”剑客”的特长。</p><ul><li><p>grep 更适合单纯的查找或匹配文本</p></li><li><p>sed 更适合编辑匹配到的文本</p></li><li><p>awk 更适合格式化文本，对文本进行较复杂格式处理</p></li></ul><h2 id="awk基础" tabindex="-1"><a class="header-anchor" href="#awk基础"><span>awk基础</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [options] ‘program’ file1 , file2 ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对于上述语法中的program来说，又可以细分成pattern和action，也就是说，awk的基本语法如下</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [options] ‘Pattern{</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Action}’</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>从字面上理解 ，action指的就是动作，awk擅长文本格式化，并且将格式化以后的文本输出，所以awk最常用的动作就是print和printf，因为awk要把格式化完成后的文本输出啊，所以，这两个动作最常用。</p><p>我们先从最简单用法开始了解awk，我们先不使用[options] ,也不指定pattern，直接使用最简单的action，从而开始认识awk，示例如下</p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图中，我们只是使用awk执行了一个打印的动作，将testd文件中的内容打印了出来。</p><p>好了，现在，我们来操作一下另一个类似的场景。</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图中的示例没有使用到options和pattern，上图中的awk ‘{print Extra close brace or missing open brace5表示将当前行按照分隔符分割后的第5列，不指定分隔符时，默认使用空格作为分隔符，细心的你一定发现了，上述信息用的空格不止有一个，而是有连续多个空格，awk自动将连续的空格理解为一个分割符了，是不是比cut命令要简单很多，这样比较简单的例子，有利于我们开始了解awk。</p><p><code>awk是逐行处理的，逐行处理的意思就是说，当awk处理一个文本时，会一行一行进行处理，处理完当前行，再处理下一行</code>，awk默认以”换行符”为标记，识别每一行，也就是说，awk跟我们人类一样，每次遇到”回车换行”，就认为是当前行的结束，新的一行的开始，awk会按照用户指定的分割符去分割当前行，如果没有指定分割符，默认使用空格作为分隔符。</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>0</code>表示显示整行，<code>NF表示当前行分割后的最后一列</code>（<code>0和NF</code>均为<code>内置变量</code>）</p><p>注意，NF和NF要表达的意思是不一样的，对于awk来说，NF表示最后一个字段，NF表示当前行被分隔符切开以后，一共有几个字段。</p><p>也就是说，假如一行文本被空格分成了7段，那么NF的值就是7，NF的值就是7, 而7表示当前行的第7个字段，也就是最后一列，那么每行的倒数第二列可以写为(NF-1)。</p><p>我们也可以一次输出多列，使用逗号隔开要输出的多个列，如下，一次性输出第一列和第二列</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同理，也可以一次性输出多个指定的列，如下图</p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们发现，第一行并没有第5列，所以并没有输出任何文本，而第二行有第五列，所以输出了。</p><p>除了输出文本中的列，我们还能够添加自己的字段，将自己的字段与文件中的列结合起来，如下做法，都是可以的。</p><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上述实验中可以看出，awk可以灵活的将我们指定的字符与每一列进行拼接，或者把指定的字符当做一个新列插入到原来的列中，也就是awk格式化文本能力的体现。</p><p>但是要注意，1这种内置变量的外侧不能加入双引号，否则1会被当做文本输出，示例如下</p><figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们也可以输出整行，比如，如下两种写法都表示输出整行。</p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们说过，awk的语法如下</p><p>awk [options] ‘Pattern{Action}’ file</p><p>而且我们说过awk是逐行处理的， 刚才已经说过了最常用的Action：print</p><h2 id="内置变量-预定义变量" tabindex="-1"><a class="header-anchor" href="#内置变量-预定义变量"><span><strong>内置变量（预定义变量）</strong></span></a></h2><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 当前记录的第n个字段，比如n为1表示第一个字段，</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">n为2表示第二个字段</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">。 </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 这个变量包含执行过程中当前行的文本内容。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">N</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ARGC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 命令行参数的数目。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">G</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ARGIND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 命令行中当前文件的位置（从0开始算）。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">N</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ARGV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 包含命令行参数的数组。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">G</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CONVFMT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 数字转换格式（默认值为%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">g）。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">P</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ENVIRON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 环境变量关联数组。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">N</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ERRNO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 最后一个系统错误的描述。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">G</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">FIELDWIDTHS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 字段宽度列表（用空格键分隔）。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">FILENAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 当前输入文件的名。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">P</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">FNR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 同NR，但相对于当前文件。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">FS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 字段分隔符（默认是任何空格）。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">G</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">IGNORECASE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 如果为真，则进行忽略大小写的匹配。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">NF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 表示字段数，在执行过程中对应于当前的字段数。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">NR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 表示记录数，在执行过程中对应于当前的行号。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">OFMT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 数字的输出格式（默认值是%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">g）。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">OFS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 输出字段分隔符（默认值是一个空格）。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ORS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 输出记录分隔符（默认值是一个换行符）。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">RS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 记录分隔符（默认是一个换行符）。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">N</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">RSTART</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 由match函数所匹配的字符串的第一个位置。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">N</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">RLENGTH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 由match函数所匹配的字符串的长度。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">N</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">SUBSEP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 数组下标分隔符（默认值是34）。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="特殊模式-pattern" tabindex="-1"><a class="header-anchor" href="#特殊模式-pattern"><span>特殊模式(Pattern)</span></a></h2><p>现在，我们来认识下一Pattern，也就是我们所说的模式</p><p>不过，我们准备先把awk中最特殊的模式展示给大家，以后再介绍普通的模式，因为普通模式需要的篇幅比较长，所以我们先来总结特殊模式。</p><p>AWK 包含两种特殊的模式：<code>BEGIN 和 END</code>。</p><ul><li><p><code>BEGIN</code> 模式指定了处理文本之前需要执行的操作：</p></li><li><p><code>END </code>模式指定了处理完所有行之后所需要执行的操作：</p></li></ul><p>什么意思呢？光说不练不容易理解，我们来看一些小例子，先从BEGIN模式开始，示例如下</p><figure><img src="`+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上述写法表示，在开始处理test文件中的文本之前，先执行打印动作，输出的内容为”aaa”,”bbb”.</p><p>也就是说，上述示例中，虽然指定了test文件作为输入源，但是在开始处理test文本之前，需要先执行BEGIN模式指定的”打印”操作</p><p>既然还没有开始逐行处理test文件中的文本，那么是不是根本就不需要指定test文件呢，我们来试试。</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>经过实验发现，还真是，我们并没有给定任何输入来源，awk就直接输出信息了，因为，BEGIN模式表示，在处理指定的文本之前，需要先执行BEGIN模式中指定的动作，而上述示例没有给定任何输入源，但是awk还是会先执行BEGIN模式指定的”打印”动作，打印完成后，发现并没有文本可以处理，于是就只完成了”打印 aaa bbb”的操作。</p><p>这个时候，如果我们想要awk先执行BEGIN模式指定的动作，再根据执我们自定义的动作去操作文本，该怎么办呢？示例如下</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图中，蓝色标注的部分表示BEGIN模式指定的动作，这部分动作需要在处理指定的文本之前执行，所以，上图中先打印出了”aaa bbb”，当BEGIN模式对应的动作完成后，在使用后面的动作处理对应的文本，即打印test文件中的第一列与第二列，这样解释应该比较清楚了吧。</p><p>看完上述示例，似乎更加容易理解BEGIN模式是什么意思了，BEGIN模式的作用就是，在开始逐行处理文本之前，先执行BEGIN模式所指定的动作。以此类推，END模式的作用就一目了然了，举例如下。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>聪明如你一定明白了，END模式就是在处理完所有的指定的文本之后，需要指定的动作。</p><p>那么，我们可以结合BEGIN模式和END模式一起使用。示例如下</p><figure><img src="'+E+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="普通模式-pattern" tabindex="-1"><a class="header-anchor" href="#普通模式-pattern"><span>普通模式(Pattern)</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">模式:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 通过NR找出指定的行</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;NR==5&#39;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	 通过模糊过滤的方式找出行</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/root/&#39;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;NR==5{print $1}&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">案例1：输出文件中第二行第二列</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@kylin-xu ~]# awk -F: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;NR==2{print $2}&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> passwd </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">案例2：输出文件中大于第六行的最后一列</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@kylin-xu ~]# awk -F: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;NR&gt;6{print $NF}&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> passwd </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/sbin/shutdown</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/sbin/halt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/sbin/nologin</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/sbin/nologin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">案例3：输出第一行的第一列和最后一列</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@kylin-xu ~]# awk -F: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;NR==1{print $1,$NF}&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> passwd </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">案例4：输出包含adm的行的第三列</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@kylin-xu ~]# awk -F: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/^adm/{print $3}&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> passwd </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,86))])}const _=n(f,[["render",x],["__file","index.html.vue"]]),R=JSON.parse('{"path":"/linux/shellbasic/","title":"基础命令","lang":"zh-CN","frontmatter":{"title":"基础命令","author":"RJMeteor","createTime":"2024/11/08 04:41:42","permalink":"/linux/shellbasic/"},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[{"level":3,"title":"终端正常退出","slug":"终端正常退出","link":"#终端正常退出","children":[]},{"level":3,"title":"终端被强制关闭","slug":"终端被强制关闭","link":"#终端被强制关闭","children":[]},{"level":3,"title":"使用 disown 命令","slug":"使用-disown-命令","link":"#使用-disown-命令","children":[]}]},{"level":2,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[]},{"level":2,"title":"概述","slug":"概述-1","link":"#概述-1","children":[]},{"level":2,"title":"使用方法","slug":"使用方法-1","link":"#使用方法-1","children":[]},{"level":2,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":2,"title":"awk基础","slug":"awk基础","link":"#awk基础","children":[]},{"level":2,"title":"内置变量（预定义变量）","slug":"内置变量-预定义变量","link":"#内置变量-预定义变量","children":[]},{"level":2,"title":"特殊模式(Pattern)","slug":"特殊模式-pattern","link":"#特殊模式-pattern","children":[]},{"level":2,"title":"普通模式(Pattern)","slug":"普通模式-pattern","link":"#普通模式-pattern","children":[]}],"git":{"createdTime":1734463427000,"updatedTime":1745296263000,"contributors":[{"name":"RJMeteor","email":"3029364473@qq.com","commits":5}]},"readingTime":{"minutes":13.38,"words":4014},"filePathRelative":"pages/linux/Shell/基础命令.md","localizedDate":"2024年12月17日","excerpt":"\\n<h2>概述</h2>\\n<ul>\\n<li><strong>用途</strong>：<code>nohup</code> 是一个 Unix 命令，用于在用户注销后继续运行命令。它的名字来源于 \\"no hang up\\"，即不挂断。</li>\\n<li>功能\\n<ul>\\n<li><strong>后台运行</strong>：将命令放到后台执行，即使用户注销或关闭终端，命令也会继续运行。</li>\\n<li><strong>输出重定向</strong>：默认将命令的输出重定向到 <code>nohup.out</code> 文件，也可以指定其他文件。</li>\\n</ul>\\n</li>\\n</ul>\\n<h3>终端正常退出</h3>"}');export{_ as comp,R as data};
